{
  "openapi": "3.0.0",
  "info": {
    "title": "Tasks Manager API",
    "description": "API for managing users and tasks",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local server"
    }
  ],
  "components": {
    "schemas": {
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "63f5e7bf80b5f4c3a51d0b67"
          },
          "title": {
            "type": "string",
            "example": "My tasks"
          },
          "body": {
            "type": "string",
            "example": "Task description"
          },
          "owner": {
            "type": "string",
            "example": "63f5e7bf80b5f4c3a51d0b55"
          }
        }
      },
      "NewTask": {
        "type": "object",
        "required": ["title", "body"],
        "properties": {
          "title": {
            "type": "string",
            "example": "My new tasks"
          },
          "body": {
            "type": "string",
            "example": "Description of a new task"
          }
        }
      },
      "UpdateTask": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Updated title"
          },
          "body": {
            "type": "string",
            "example": "Updated description"
          }
        }
      }
    }
  },
  "paths": {
    "/api/users/register": {
      "post": {
        "summary": "New user registration",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "description": "Parameters: email (string), name (string), password (string)",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Alex"
                  },
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful"
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "User already registered"
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "summary": "User login",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "description": "Parameters: email (string), password (string)",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authorization"
          },
          "401": {
            "description": "Incorrect email or password"
          }
        }
      }
    },
    "/api/users/logout": {
      "get": {
        "tags": ["Users"],
        "summary": "User logout",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "JWT token for authorization",
            "schema": {
              "type": "string",
              "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful logout"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/tasks": {
      "get": {
        "summary": "Get all user tasks",
        "tags": ["Tasks"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a new task",
        "tags": ["Tasks"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTask"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully"
          },
          "400": {
            "description": "Invalid data"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/tasks/{id}": {
      "get": {
        "summary": "Get task by ID",
        "tags": ["Tasks"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Task ID",
            "schema": {
              "type": "string",
              "example": "taskId123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      },
      "put": {
        "summary": "Update task",
        "tags": ["Tasks"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Task ID",
            "schema": {
              "type": "string",
              "example": "taskId123"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTask"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      },
      "delete": {
        "summary": "Delete task",
        "tags": ["Tasks"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Task ID",
            "schema": {
              "type": "string",
              "example": "taskId123"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Task deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    }
  }
}
